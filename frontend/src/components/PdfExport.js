import React from 'react';
import {
  Page,
  Text,
  Font,
  View,
  Image,
  Document,
  StyleSheet,
  PDFViewer,
  PDFDownloadLink
} from '@react-pdf/renderer';
import { Dimmer, Loader, Segment } from 'semantic-ui-react'
import handleExpiredSession from './ExpiredSessionHandler';
import { recordExpression } from '@babel/types';

Font.register({
  family: 'Oswald',
  src: 'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf'
});

const styles = StyleSheet.create({
  body: {
    paddingTop: 35,
    paddingBottom: 65,
    paddingHorizontal: 35,
  },
  title: {
    fontSize: 24,
    textAlign: 'center',
    fontFamily: 'Oswald'
  },
  author: {
    fontSize: 12,
    textAlign: 'center',
    marginBottom: 40,
  },
  subtitle: {
    fontSize: 18,
    margin: 12,
    fontFamily: 'Oswald'
  },
  subtitleCenter: {
    fontSize: 18,
    margin: 12,
    textAlign: 'center',
    fontFamily: 'Oswald'
  },
  recordHeader: {
    margin: 12,
    fontSize: 16,
    textAlign: 'justify',
    fontFamily: 'Oswald'
  },
  text: {
    margin: 12,
    fontSize: 14,
    textAlign: 'justify',
    fontFamily: 'Times-Roman'
  },
  activityHeader: {
    marginLeft: 16,
    fontSize: 14,
    textAlign: 'justify',
    fontFamily: 'Times-Roman'
  },
  activityName: {
    marginLeft: 16,
    fontSize: 14,
    textAlign: 'justify',
    fontFamily: 'Times-Roman'
  },
  activityDescription: {
    marginLeft: 20,
    fontSize: 14,
    textAlign: 'justify',
    fontFamily: 'Times-Roman'
  },
  documentHeader: {
    marginLeft: 16,
    fontSize: 14,
    textAlign: 'justify',
    fontFamily: 'Times-Roman'
  },
  image: {
    marginVertical: 15,
    marginHorizontal: 100,
  },
  imageCaption: {
    fontSize: 14,
    textAlign: 'center',
    fontFamily: 'Times-Roman'
  },
  header: {
    fontSize: 12,
    marginBottom: 20,
    textAlign: 'center',
    color: 'grey',
  },
  pageNumber: {
    position: 'absolute',
    fontSize: 12,
    bottom: 30,
    left: 0,
    right: 0,
    textAlign: 'center',
    color: 'grey',
  },
});

class PdfExport extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      carId: props.carId,
      exportData: null
    }
  }

  componentDidMount() {
    fetch("/api/cars/" + this.state.carId + "/export", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    })
      .then(handleExpiredSession)
      .then(res => {
        if (!res.ok) {
          throw new Error()
        }
        return res.json()
      })
      .then(data => this.setState({ exportData: data }))
      .catch(error => {
        this.setState({ failedToCreate: true })
      })
  }

  activity(activity) {
    return <div>
      <Text style={styles.text}>{activity.type}</Text>
      <Text style={styles.text}>{activity.note}</Text>
    </div>
  }

  doc(data) {
    let { exportData } = this.state
    return (
      <Document>
        <Page style={styles.body}>
          <Text style={styles.header} fixed>
            Generated by CarLog
          </Text>
          <Text style={styles.title}>{exportData.car.year} {exportData.car.make}</Text>
          <Text style={styles.subtitleCenter}>{exportData.car.model} {exportData.car.trim}</Text>
          <Text style={styles.author}>Owner: {exportData.user.name}</Text>
          {
            exportData.records.map(rE => {
              return <View>
                <Text style={styles.recordHeader}>Record for {rE.record.date}</Text>
                <Text style={styles.activityHeader}>Activities performed:</Text>
                {
                  rE.activities.map(activity => {
                    return <View>
                      <Text style={styles.activityName}>âœ” {activity.typeName}</Text>
                      <Text style={styles.activityDescription}>- {activity.notes}</Text>
                    </View>
                  })
                }
                <Text style={styles.documentHeader}>Documents:</Text>
                {
                  rE.documents.map(document => {
                    return <View>
                      <Image style={styles.image} src={document.url} />
                      <Text style={styles.imageCaption}>{document.description}</Text>
                    </View>
                  })
                }
              </View>
            })
          }
          <Text style={styles.pageNumber} render={({ pageNumber, totalPages }) => (
            `${pageNumber} / ${totalPages}`
          )} fixed />
        </Page>
      </Document>
    )
  }

  downloadLink() {
    return (
      <PDFDownloadLink document={this.doc()} fileName="somename.pdf">
        {({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Download now!')}
      </PDFDownloadLink>
    )
  }

  render() {
    if (!this.state.exportData) {
      return <Segment>
        <Dimmer active>
          <Loader />
        </Dimmer>
        <Image src='https://react.semantic-ui.com/images/wireframe/short-paragraph.png' />
      </Segment>
    }
    return (
      <PDFViewer width="100%" height="1000">
        {this.doc(this.state.exportData)}
      </PDFViewer>
    )
  }
}

export default PdfExport